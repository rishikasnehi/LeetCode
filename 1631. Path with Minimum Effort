class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int rows = heights.size();
        int cols = heights[0].size();

        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        pq.push({0, 0, 0}); //[diff, r, c]

        set<pair<int, int>> visited;

        vector<pair<int, int>> dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        
        while(!pq.empty()){
            // auto [diff, r, c] = pq.top();
            int diff = pq.top()[0];
            int r = pq.top()[1];
            int c = pq.top()[2];
            pq.pop();

            if(visited.find({r, c}) != visited.end())
                continue;
            
            visited.insert({r, c});

            if(r == rows - 1 && c == cols - 1)
                return diff;

            for(auto d : dir){
                int x = d.first + r;
                int y = d.second + c;
                if(x < 0 || x == rows ||
                   y < 0 || y == cols || 
                   visited.find({x, y}) != visited.end())
                    continue;

                int new_diff = max(diff, abs(heights[r][c] - heights[x][y]));
                pq.push({new_diff, x, y});
            }
        }

        return 0;

    }
};
