class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if(grid.empty() || grid[0].empty())
            return 0;

        int m = grid.size();
        int n = grid[0].size();

        int total = 0;

        queue<pair<int, int>> q;

        vector<pair<int, int>> directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == '1') {
                    queue<pair<int, int>> q;
                    q.push({i, j});
                    grid[i][j] = '0';
                    while (!q.empty()) {
                        auto point = q.front();
                        q.pop();

                        for (auto& dir : directions) {
                            int newX = point.first + dir.first;
                            int newY = point.second + dir.second;

                            if (newX >= 0 && newX < m && newY >= 0 && newY < n && grid[newX][newY] == '1') {
                                grid[newX][newY] = '0';  // Mark as visited
                                q.push({newX, newY});
                            }
                        }
                    }
                    ++total;
                }    
            }
        }
        return total;
    }
};
