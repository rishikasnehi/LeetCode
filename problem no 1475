// using nested for loops, time complexity = O(n^2), time = 8ms
class Solution {
public:
    vector<int> finalPrices(vector<int>& prices) {
        int n = prices.size();
        vector<int> answer;
        for(int i = 0; i < n; i++)
        {
            bool discounted = false;
            for(int j = i + 1; j < n; j++)
            {
                if(prices[j] <= prices[i])
                {
                    discounted = true;
                    answer.push_back(prices[i] - prices[j]);
                    break;
                }
            }
            if(!discounted)
                answer.push_back(prices[i]);
        }
        return answer;
    }
};



// using stack, time complexity = O(n), time = 0ms
class Solution {
public:
    vector<int> finalPrices(vector<int>& prices) {
        vector<int> answer(prices);
        stack<int> stk;
        int n = prices.size();
        for(int i = 0; i < n; i++)
        {
            while(!stk.empty() && prices[i] <= prices[stk.top()])
            {
                int idx = stk.top();
                stk.pop();
                answer[idx] -= prices[i]; 
            }
            stk.push(i);
        }
        return answer;
    }
};
