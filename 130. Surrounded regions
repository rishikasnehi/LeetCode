class Solution {
public:
    void solve(vector<vector<char>>& board) {
        if(board.size()==0)
            return ;

        int m = board.size();
        int n = board[0].size();

        queue<pair<int, int>> q;
        vector<pair<int, int>> dir = {{1,0}, {-1,0}, {0, 1}, {0, -1}};

        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] =='O' && (i == 0 || i == m - 1 || j == 0 || j == n - 1)){
                    board[i][j] = '.';
                    q.push({i,j});                    
                }
            }
        }

        while(!q.empty()){
            pair<int, int> temp = q.front();
            q.pop();
            for(int i = 0;i < dir.size(); i++){
                int x = temp.first + dir[i].first;
                int y = temp.second + dir[i].second;
                if(x > 0 && x < m - 1 && y > 0 && y < n - 1 && board[x][y]=='O'){
                    board[x][y]= '.';
                    q.push({x,y});
                }
            }
        }
        for(int i = 0; i < m;i++)
            for(int j = 0; j < n; j++)
                if(board[i][j] == 'O')
                    board[i][j] = 'X';
				else if(board[i][j] == '.')
                    board[i][j] = 'O';
    }
};
