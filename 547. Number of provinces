class UnionFind{
public:

    vector<int> root;
    UnionFind(int sz) : root(sz){
        for(int i = 0; i < sz; i++){
            root[i] = i;
        }
    }

    int find(int x){
        if(x == root[x])
            return x;
        return root[x] = find(root[x]);
    }

    void unionSet(int x, int y){
        int rootx = find(x);
        int rooty = find(y);
        if(rootx != rooty)
            root[rooty] = rootx;
    }

    int groups(){
        set<int> visit;
        for(int i : root)
            visit.insert(find(i));
        return visit.size();
    }
};

class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        UnionFind uf(n);
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(isConnected[i][j] == 1)
                    uf.unionSet(i, j);
            }
        }
        return uf.groups();
    }
};
