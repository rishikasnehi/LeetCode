class UnionFind{
public:
    vector<int> root;
    UnionFind(int n) : root(n){
        for(int i = 0; i < n; i++)
            root[i] = i;
    }

    int find(int x){
        if(x == root[x])
            return x;
        return root[x] = find(root[x]);
    }

    void unionSet(int x, int y){
        int rootx = find(x);
        int rooty = find(y);
        if(rootx != rooty)
            root[rooty] = rootx;
    }

    bool connected(int i, int j){
        return find(i) == find(j);
    }
};

class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        UnionFind uf(n);
        for(auto v : edges){
            uf.unionSet(v[0], v[1]);
        }
        return uf.connected(source, destination);
    }
};
