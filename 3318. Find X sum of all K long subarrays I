class Solution {
public:

    struct Compare{
        bool operator()( const pair<int, int>&a, pair<int, int>&b){
            if(a.second == b.second)
                return a.first < b.first;
            return a.second < b.second;
        }
    };

    vector<int> findXSum(vector<int>& nums, int k, int x) {
        int n = nums.size();
        vector<int> result(n - k + 1);
        for (int i = 0; i <= n - k; i++) {
            result[i] = getSum(nums, i, i + k - 1, x);
        } 
        return result;
    }

private:
    int getSum(std::vector<int>& nums, int start, int end, int x) {
        unordered_map<int, int> map;
        for (int i = start; i <= end; i++) {
            map[nums[i]]++;
        }

        auto comp = [](pair<int, int>& a, pair<int, int>& b) {
            if (a.second == b.second) {
                return a.first < b.first;
            }
            return a.second < b.second;
        };

        priority_queue<pair<int, int>, vector<pair<int, int>>, Compare> pq;

        for (const auto& entry : map) {
            pq.push(entry);
        }

        int sum = 0;
        while (x > 0 && !pq.empty()) {
            auto pair = pq.top();
            pq.pop();
            sum += pair.first * pair.second;
            x--;
        }

        return sum;

    }
};
