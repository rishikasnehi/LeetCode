/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minimumOperations(TreeNode* root) {
        int ans = 0;
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            vector<int> temp;
            for(int n = q.size(); n > 0; --n){
                TreeNode* node = q.front();
                q.pop();
                temp.push_back(node -> val);

                if(node->left) 
                    q.push(node->left);
                if(node->right) 

                    q.push(node->right);
            }

            vector<int> sort_level = temp;
            sort(sort_level.begin(), sort_level.end());
            unordered_map<int, int> mp;

            for (int i = 0; i < temp.size(); ++i) {
                mp[temp[i]] = i;
            }

            for (int i = 0; i < temp.size(); ++i) {
                while (temp[i] != sort_level[i]) {
                    ++ans;
                    int cur = mp[sort_level[i]];
                    mp[temp[i]] = cur;
                    swap(temp[i], temp[cur]);
                }
            }
        }
        return ans;
    }
};
