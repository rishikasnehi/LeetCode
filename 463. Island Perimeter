class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        if(grid.empty() || grid[0].empty())
            return 0;
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<bool>> visited(n, vector<bool>(m, false));
        vector<int> row_dir = {-1, 0, 0, 1};
        vector<int> col_dir = {0, -1, 1, 0};
        int perimeter = 0;
        queue<pair<int, int>> q; // t0 store the cell which is ground

        bool found = false; // to check whether wo found one cell to start bfs

        // loop to find one cell to start bfs
        for(int i = 0; i < n && !found; i++){
            for(int j = 0; j < m; j++){
                if(grid[i][j] == 1){
                    visited[i][j] = true;
                    q.push({i, j});
                    found = true;
                    break;
                }
            }
        }

        while(!q.empty()){
            auto cell = q.front();
            q.pop();
            int row = cell.first;
            int col = cell.second;
            for(int i = 0; i < 4; i++){
                int new_row = row + row_dir[i];
                int new_col = col + col_dir[i];

                if(new_row < 0 || new_row >= n || new_col < 0 || new_col >= m || grid[new_row][new_col] == 0)
                    perimeter++;

                else if(!visited[new_row][new_col] && grid[new_row][new_col] == 1){
                    q.push({new_row, new_col});
                    visited[new_row][new_col] = true;
                }
            }
        }

        return perimeter;
    }
};
