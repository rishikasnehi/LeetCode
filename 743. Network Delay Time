class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        unordered_map<int, unordered_map<int, int>> graph;
        
        for (const auto& time : times) 
            graph[time[0]][time[1]] = time[2];
        
        // uncomment to print graph
        // for (auto outer : graph){
        //     cout << outer.first << " -> ";
        //     for (auto inner : outer.second) {
        //         cout << inner.first << "  " << inner.second << "\n";
        //     }
        // }

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        vector<int> dist(n + 1, INT_MAX);
        
        dist[k] = 0;
        pq.push({0, k});
        
        while (!pq.empty()) {
            auto [curDist, curNode] = pq.top();
            pq.pop();
            
            if (dist[curNode] < curDist) 
                continue;
            
            if (graph.find(curNode) != graph.end()) {
                for (auto [nextNode, weight] : graph[curNode]) {
                    int newDist = curDist + weight;
                    if (newDist < dist[nextNode]) {
                        dist[nextNode] = newDist;
                        pq.push({newDist, nextNode});
                    }
                }
            }
        }
        int res = 0;
        for (int i = 1; i <= n; ++i) {
            if (dist[i] == INT_MAX) {
                return -1;  
            }
            res = max(res, dist[i]);
        }
        
        return res;
    }
};
