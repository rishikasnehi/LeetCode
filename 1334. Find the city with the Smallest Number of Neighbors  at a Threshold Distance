class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        unordered_map<int, vector<pair<int, int>>> graph;
        for(int i = 0; i < edges.size(); i++){
            int a = edges[i][0], b = edges[i][1];
            graph[a].push_back({b, edges[i][2]});
            graph[b].push_back({a, edges[i][2]});
        }

        int res_node = -1, min_nei_count = INT_MAX; // we can also initialize min_nei_count to n bcoz the no. of nodes a node can visit will always be less than n
        for(int i = 0; i < n; i++){
            int nei_count = dijkstra(i, distanceThreshold, graph);
            if(nei_count <= min_nei_count){
                res_node = i;
                min_nei_count = nei_count;
            }
        }  
        return res_node;
    }

    int dijkstra(int src, int distanceThreshold, unordered_map<int, vector<pair<int, int>>> graph){
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, src});

        set<int> visited;

        while(!pq.empty()){
            auto [dist, node] = pq.top();
            pq.pop();
            if(visited.find(node) != visited.end())
                continue;
            visited.insert(node);
            for(auto neigh : graph[node]){
                int new_dist = dist + neigh.second;
                if(new_dist <= distanceThreshold)
                    pq.push({new_dist, neigh.first});
            }
        }
        return visited.size() - 1;
    }
};
