class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        if(image[sr][sc] == color)
            return image;

        int m = image.size();
        int n = image[0].size();

        vector<vector<bool>> visited(m, vector<bool>(n, false));

        vector<int> row_dx = {-1, 0, 0, 1};
        vector<int> col_dx = {0, -1, 1, 0};

        queue<pair<int, int>> q;
        q.push({sr, sc});

        visited[sr][sc] = true;

        while(!q.empty()){
            auto temp = q.front();
            q.pop();

            int r = temp.first;
            int c = temp.second;

            int prev = image[r][c];

            image[r][c] = color;

            for(int i = 0; i < 4; i++){
                int new_r = r + row_dx[i];
                int new_c = c + col_dx[i];
                
                if(new_r >= 0 && new_r < m && new_c >= 0 && new_c < n &&visited[new_r][new_c] == false && image[new_r][new_c] == prev){
                    q.push({new_r, new_c});
                    visited[new_r][new_c] = true;
                }
            }
        }
        return image;
    }
};
