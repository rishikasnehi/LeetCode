class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();

        if(grid[0][0] != 0 || grid[n - 1][n - 1] != 0)
            return -1;

        queue<pair<int, int>> q;
        q.push({0, 0});
        grid[0][0] = 1;
        vector<pair<int, int>> directions = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}, {1, 1}, {-1, -1}, {-1, 1}, {1, -1}};

        while(!q.empty()){
            auto curr = q.front();
            q.pop();

            int curr_x = curr.first;
            int curr_y = curr.second;

            if(curr_x == n - 1 && curr_y == n - 1)
                return grid[curr_x][curr_y];

            for(auto dir : directions){

                int new_x = curr_x + dir.first;
                int new_y = curr_y + dir.second;

                if(new_x >= 0 && new_y >= 0 && new_x < n && new_y < n && grid[new_x][new_y] == 0){
                    q.push({new_x, new_y});
                    grid[new_x][new_y] += grid[curr_x][curr_y] + 1;
                }
            }
        }

        return -1;
    }
};
