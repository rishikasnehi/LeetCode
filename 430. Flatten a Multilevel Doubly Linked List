/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* prev;
    Node* next;
    Node* child;
};
*/

class Solution {
public:
    Node* flatten(Node* head) {
        if(!head)
            return head;
        Node* curr = head;
        // run until the ptr is not null
        while(curr != NULL){

            // if the child of the current node is null then move to next iteration
            if(curr -> child == NULL){
                curr = curr -> next;
                continue;
            }

            //if curr -> child is not null then set a pointer to the child node and find the tail of child node
            Node* temp = curr -> child;
            while(temp -> next != nullptr){
                temp = temp -> next;
            }

            // if curr -> next is not null then connect the tail of child to the next of curr
            if(curr -> next != NULL){
                temp -> next = curr -> next;
                curr -> next -> prev = temp;
            }
            // update curr -> next to to its child node and curr -> child to null  
            curr -> next = curr -> child;
            curr -> child -> prev = curr;
            curr -> child = nullptr;

        }
        return head;
    }
};
