class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        vector<pair<int, int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};

        queue<pair<int, int>> q;

        int time = 0;

        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
                if(grid[i][j] == 2)
                    q.push({i, j});

        while(!q.empty()){

            int l = q.size();
            time++;

            while(l--){
                int x = q.front().first;
                int y = q.front().second;
                q.pop();

                for(auto d : directions){
                    int new_x = x + d.first;
                    int new_y = y + d.second;

                    if(new_x >= 0 && new_y >= 0 && new_x < m && new_y < n && grid[new_x][new_y] == 1){
                        grid[new_x][new_y] = 2;
                        q.push({new_x, new_y});
                    }
                }
            }
        }

        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
                if(grid[i][j] == 1)
                    return -1;
                    
        return max(0, time - 1);
    }
};
